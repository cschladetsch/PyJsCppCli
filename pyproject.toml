[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ask-cli"
version = "0.3.0"
description = "A powerful command-line interface for interacting with Claude AI models"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Ask CLI Contributors", email = "noreply@example.com"}
]
maintainers = [
    {name = "Ask CLI Contributors", email = "noreply@example.com"}
]
keywords = ["ai", "claude", "cli", "anthropic", "chatbot", "assistant"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Shells",
    "Topic :: Utilities"
]
requires-python = ">=3.8"
dependencies = [
    "anthropic>=0.44.0",
    "prompt_toolkit>=3.0.39",
    "pyperclip>=1.8.2",
    "pyyaml>=6.0",
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
    "mypy>=1.5.0",
    "types-requests",
    "types-PyYAML",
    "ruff>=0.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "pre-commit>=3.4.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0"
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0"
]
build = [
    "build>=0.10.0",
    "wheel>=0.41.0"
]

[project.urls]
Homepage = "https://github.com/cschladetsch/PyClaudeCli"
Documentation = "https://github.com/cschladetsch/PyClaudeCli#readme"
Repository = "https://github.com/cschladetsch/PyClaudeCli"
Issues = "https://github.com/cschladetsch/PyClaudeCli/issues"
Changelog = "https://github.com/cschladetsch/PyClaudeCli/blob/master/CHANGELOG.md"

[project.scripts]
ask = "ask.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["ask*"]
exclude = ["tests*", "docs*", "build*"]

[tool.setuptools.package-data]
ask = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | tests/fixtures
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ask"]
known_third_party = ["anthropic", "prompt_toolkit", "pyperclip", "yaml", "aiohttp", "aiofiles"]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "Q",    # flake8-quotes
    "FBT",  # flake8-boolean-trap
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "T201",   # print found
    "FBT001", # boolean-positional-arg-in-function-definition
    "FBT002", # boolean-default-arg-in-function-definition
    "ARG001", # unused-function-argument
    "ARG002", # unused-method-argument
]

[tool.ruff.per-file-ignores]
"Tests/**/*.py" = [
    "S101",   # asserts allowed in tests
    "ARG",    # unused arguments in tests
    "FBT",    # boolean args in tests
    "PLR2004", # magic values in tests
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "prompt_toolkit.*",
    "pyperclip.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=ask",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch"
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (may use real files/network)",
    "e2e: End-to-end tests (full workflow)",
    "slow: Slow running tests",
    "benchmark: Performance benchmarks"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["ask"]
omit = [
    "*/Tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod"
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]